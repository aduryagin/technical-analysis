# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AlgorithmTrade {
  id: Float!
  instrument: Instrument!
  price: Float!
  closePrice: Float
  interval: String!
  type: String!
  closed: Boolean!
  date: String!
  closeDate: String
  pricePercentChange: Float!
}

type Source {
  id: Float
  name: String!
  key: String
  secret: String
}

type Instrument {
  id: Float
  source: String!
  ticker: String
  figi: String
  price: Float
  pricePercentChange: Float
}

type Candle {
  time: String!
  timestamp: Float!
  close: Float!
  open: Float!
  high: Float!
  low: Float!
  volume: Float!
}

type CandleSubscriptionData {
  candle: Candle!
  instrument: Instrument!
}

type Indicator {
  id: Float
  name: String!
  settings: [Float!]
}

type ShapePoint {
  dataIndex: Float
  timestamp: Float
  value: Float!
}

type Shape {
  id: Float!
  name: String!
  ticker: String!
  points: [ShapePoint!]!
}

type TipRanksInfo {
  priceTarget: Float!
  priceTargetHigh: Float!
  priceTargetLow: Float!
  ratingBuy: Float!
  ratingHold: Float!
  ratingSell: Float!
  stockScore: Float!
  newsSentimentBullishPercent: Float!
  newsSentimentBearishPercent: Float!
  lastWeekBuyNews: Float!
  lastWeekSellNews: Float!
  lastWeekNeutralNews: Float!
}

type TradingViewIdea {
  title: String!
  link: String!
  timeframe: String!
  type: String!
  date: String!
  likes: Float!
  comments: Float!
  pureDate: String!
}

type Query {
  searchInstrument(ticker: String!): [Instrument!]!
  sources: [Source!]!
  candles(source: SourceName, ticker: String, figi: String, to: String, interval: Interval!): [Candle!]!
  tradingViewIdeas(ticker: String!): [TradingViewIdea!]!
  tipRanksInfo(ticker: String!): TipRanksInfo!
  indicators: [Indicator!]!
  shapes(ticker: String!): [Shape!]!
}

enum SourceName {
  Tinkoff
  Binance
}

enum Interval {
  MIN1
  MIN2
  MIN3
  MIN5
  MIN10
  MIN15
  MIN30
  HOUR
  HOUR2
  HOUR4
  HOUR6
  HOUR8
  HOUR12
  DAY
  DAY3
  WEEK
  MONTH
}

type Mutation {
  watch(input: WatchInput!): Instrument!
  unwatch(id: Float!): Boolean!
  addSource(input: AddSourceInput!): Source!
  updateSource(input: UpdateSourceInput!): Source!
  removeSource(id: Float!): Boolean!
  closeTrade(id: Float!): Boolean!
  addIndicator(input: AddIndicatorInput!): Indicator!
  updateIndicator(input: UpdateIndicatorInput!): Indicator!
  removeIndicator(id: Float!): Boolean!
  addShape(input: AddShapeInput!): Shape!
  updateShape(input: UpdateShapeInput!): Shape!
  removeShape(id: Float!): Boolean!
}

input WatchInput {
  ticker: String!
  figi: String
  source: String!
}

input AddSourceInput {
  name: SourceName!
  key: String
  secret: String
}

input UpdateSourceInput {
  id: Float!
  key: String
  secret: String
}

input AddIndicatorInput {
  name: String!
}

input UpdateIndicatorInput {
  id: Float!
  settings: [Float!]!
}

input AddShapeInput {
  name: String!
  ticker: String!
  points: [SharePointInput!]!
}

input SharePointInput {
  dataIndex: Float
  timestamp: Float
  value: Float
}

input UpdateShapeInput {
  id: Float!
  points: [SharePointInput!]!
}

type Subscription {
  watchList: [Instrument!]!
  candle(source: SourceName, figi: String, ticker: String, interval: Interval!): CandleSubscriptionData!
  trades: [AlgorithmTrade!]!
}
